generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin{
  id String @id
  username String @unique

}
model Student{
  id String @id 
  username String  @unique
  name String
  surname String
  email String?
  phone String?
  address String
  img String?
  bloodtype String?
  sex UserSex
  createdAt DateTime @default(now())
  parentId String
  parent Parent @relation(fields: [parentId],references: [id])
  classId Int 
  class Class @relation(fields:[classId],references: [id])
  gradeId Int
  grade Grade @relation(fields: [gradeId],references: [id])
  attendances Attendance[]
  results Result[]
  
}
model Teacher{
  id String @id 
  username String  @unique
  name String
  surname String
  email String?
  phone String?
  address String
  img String?
  bloodtype String?
  sex UserSex
  subjects Subject[]
  lessons Lesson[]
  classes Class[]
  createdAt DateTime @default(now())
}
// model Subject{}
model Parent{
  id String @id 
  username String  @unique
  name String
  surname String
  email String?
  phone String?
  address String
  createdAt DateTime @default(now())
  students Student[]
}
model Subject{
  id Int @id @default(autoincrement())
  name String @unique
  teachers Teacher[]  // you don't have to create a junction table manually , primsa will do on backend
  Lessons Lesson[]
  

}
model Grade{
  id Int @id @default(autoincrement())
  level String @unique
  students Student[]
  classes Class[]
}
model Class{
  id Int @id @default(autoincrement())
  name String @unique 
  capacity Int

  lessons Lesson[]
  supervisorId String
  supervisor Teacher @relation(fields: [supervisorId],references: [id])
  students Student[]
  gradeId Int
  grade Grade @relation(fields: [gradeId],references: [id])
  announcements Announcement[]
  events Event[]
  
}
model Lesson{
  id Int @id @default(autoincrement())
  name String
  day Day
  startTime String
  endTime String
  subjectId Int
  subject Subject @relation(fields: [subjectId],references: [id])
  classId Int
  class Class @relation(fields: [classId],references:[id])
  teacherId String
  teacher Teacher @relation(fields: [teacherId],references:[id])
  exams Exam[]
  assignmets Assignment[]
  attendances Attendance[]
}
model Exam{
  id Int @id @default(autoincrement())
  title String

  startTime DateTime
  endTime DateTime

  lessonId Int
  lesson Lesson @relation(fields: [lessonId],references: [id])
  result Result[]
}
model Assignment{
  id Int @id @default(autoincrement())
  title String

  startDate DateTime
  dueDate DateTime
  lessonId Int
  lesson Lesson @relation(fields: [lessonId],references: [id])
  result Result[]
}
model Result{
  id Int @id @default(autoincrement())
  score String

  examId Int
  exam Exam @relation(fields: [examId],references: [id])
  
  assignmentId Int
  assignment Assignment @relation(fields:[assignmentId],references: [id])

  studentId String
  student Student @relation(fields:[studentId],references: [id])

}

model Attendance{
  id Int @id @default(autoincrement())
  date DateTime @default(now())
  present Boolean

  studentId String
  student Student @relation(fields: [studentId],references: [id])
  lessonId Int
  lesson Lesson @relation(fields: [lessonId],references: [id])

}
model Event{
  id Int @id @default(autoincrement())
  title String
  description String?
  startDate DateTime
  endDate DateTime

  classId Int?
  class Class? @relation(fields: [classId],references: [id])
}
model Announcement{
  id Int @id @default(autoincrement())
  title String
  description String?
  date DateTime

  classId Int?
  class Class? @relation(fields: [classId],references: [id])
}

enum UserSex {
  Male
  Female
}
enum Day{
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday

}